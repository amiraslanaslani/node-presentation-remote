{
  "_args": [
    [
      {
        "raw": "node-key-sender",
        "scope": null,
        "escapedName": "node-key-sender",
        "name": "node-key-sender",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/mrse/Documents/Remothon"
    ]
  ],
  "_from": "node-key-sender@latest",
  "_id": "node-key-sender@1.0.9",
  "_inCache": true,
  "_location": "/node-key-sender",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/node-key-sender-1.0.9.tgz_1489484566766_0.32224002690054476"
  },
  "_npmUser": {
    "name": "garimpeiro",
    "email": "garimpeiroit@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-key-sender",
    "scope": null,
    "escapedName": "node-key-sender",
    "name": "node-key-sender",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/node-key-sender/-/node-key-sender-1.0.9.tgz",
  "_shasum": "b140a97ef5e56430139c0a0362a138559e3d9805",
  "_shrinkwrap": null,
  "_spec": "node-key-sender",
  "_where": "/home/mrse/Documents/Remothon",
  "author": {
    "name": "Garimpeiro"
  },
  "bugs": {
    "url": "https://github.com/garimpeiro-it/node-key-sender/issues",
    "email": "garimpeiroit@gmail.com"
  },
  "dependencies": {},
  "description": "NodeJs lib to send keyboard input to the operational system.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "b140a97ef5e56430139c0a0362a138559e3d9805",
    "tarball": "https://registry.npmjs.org/node-key-sender/-/node-key-sender-1.0.9.tgz"
  },
  "gitHead": "758b14f9368eb791de9e9d3bf3e831a105fd33a6",
  "homepage": "https://github.com/garimpeiro-it/node-key-sender#readme",
  "keywords": [
    "nodejs",
    "key",
    "keyboard",
    "input",
    "send",
    "keystroke",
    "os",
    "operational",
    "system",
    "java",
    "jar"
  ],
  "license": "MIT",
  "main": "key-sender.js",
  "maintainers": [
    {
      "name": "fernandohu",
      "email": "fernandoservico@gmail.com"
    },
    {
      "name": "garimpeiro",
      "email": "garimpeiroit@gmail.com"
    }
  ],
  "name": "node-key-sender",
  "optionalDependencies": {},
  "readme": "# node-key-sender\n\nUse this lib to send keyboard events to the operational system. \n\nIt uses a jar file (Java), so Java Run Time is required on the operational system you are running your node project.\n\n**Bugs and issues**: Please, post any issues to https://github.com/garimpeiro-it/node-key-sender/issues. \n\n# Main features\n\n- Send raw keyboard key codes to the operational system;\n- Send one key;\n- Send multiple keys pressed one after the other;\n- Send multiple keys pressed together (combination);\n- Delay between keys;\n- Delay for each pressed key or each combination;\n- Possibility to map key codes;\n- Case correction for text;\n- Multi platform (it will work in all operation systems that Java can run);\n- It will send the key to the current focused application in the operational system.\n\n# Installation\n\nInstall it using npm:\n\n    npm install --save-dev node-key-sender\n\nThe command above will install and add the lib into your \"package.json\" file.\n\n# How it works\n\nEach key in your keyboard is mapped with a key code. Although a physical keyboard key may have printed above its surface more than one key (for example ':' and ';'), both generate the same key code. So, do not confuse key codes with ASCII or UNICODE values, they are different things.\n\nTo make it clear, lets see an example: In american keyboard, the 16 value is the key code for Shift and the 59 value is the key code for the key \":;\". So, in this scenario, to send ':' to the operational system, you should use key code 56. To send ';' you should send 16 + 56 as a combination (pressed together). \n\nIn languages that have accents (for example: portuguese and spanish), usually more than one key must be pressed one after another to make the letter with an accent. So 'õ' is the result of sending '~' and 'o'.\n\nWhile you can send the key codes as numbers, the lib also have labels mapped for most of the keys. So, for key A you may send 'a' or 65. For Shift key you may send 'shift' or 16.\n\nIt is possible to change this mapping to convert accents automatically (if you are using a keyboard that supports it). Later in this doc I show how to do that.\n\nNote that key codes may vary according to your running physical keyboard model, keyboard driver and operational system.\n\n# Usage\n\nSending one key:\n\n    var ks = require('node-key-sender');\n    ks.sendKey('a');\n\nSend multiple keys one after the other:\n\n    var ks = require('node-key-sender');\n    ks.sendKeys(['a', 'b', 'c']);\n\nSend combination (pressed at the same time):\n\n    var ks = require('node-key-sender');\n    ks.sendCombination(['control', 'shift', 'v']);\n\nMapping accents:\n\n    var accentsMap = {\n        'ã': '@514 a',\n        'ẽ': '@514 e',\n        'ĩ': '@514 i',\n        'õ': '@514 o',\n        'ũ': '@514 u',\n        'Ã': '@514 A',\n        'Ẽ': '@514 E',\n        'Ĩ': '@514 I',\n        'Õ': '@514 O',\n        'Ũ': '@514 U',\n        'â': 'shift-@514 a',\n        'ê': 'shift-@514 e',\n        'î': 'shift-@514 i',\n        'ô': 'shift-@514 o',\n        'û': 'shift-@514 u',\n        'Â': 'shift-@514 A',\n        'Ê': 'shift-@514 E',\n        'Î': 'shift-@514 I',\n        'Ô': 'shift-@514 O',\n        'Û': 'shift-@514 U',\n        'à': 'shift-@192 a',\n        'è': 'shift-@192 e',\n        'ì': 'shift-@192 i',\n        'ò': 'shift-@192 o',\n        'ù': 'shift-@192 u',\n        'À': 'shift-@192 A',\n        'È': 'shift-@192 E',\n        'Ì': 'shift-@192 I',\n        'Ò': 'shift-@192 O',\n        'Ù': 'shift-@192 U',\n        'á': '@192 a',\n        'é': '@192 e',\n        'í': '@192 i',\n        'ó': '@192 o',\n        'ú': '@192 u',\n        'Á': '@192 A',\n        'É': '@192 E',\n        'Í': '@192 I',\n        'Ó': '@192 O',\n        'Ú': '@192 U',\n        'ç': '@192 c',\n        'Ç': '@192 C',\n        'ä': 'shift-@54 a',\n        'ë': 'shift-@54 e',\n        'ï': 'shift-@54 i',\n        'ö': 'shift-@54 o',\n        'ü': 'shift-@54 u',\n        'Ä': 'shift-@54 A',\n        'Ë': 'shift-@54 E',\n        'Ï': 'shift-@54 I',\n        'Ö': 'shift-@54 O',\n        'Ü': 'shift-@54 O'\n    };\n    \n    var ks = require('node-key-sender');\n    ks.aggregateKeyboardLayout(accentsMap);\n    ks.sendText(\"Héllõ Wíth Áçcents\");\n\nSending batch:\n\n    var ks = require('node-key-sender');\n\n    ks.startBatch()\n        .batchTypeKey('N')\n        .batchTypeKey('o')\n        .batchTypeKey('d')\n        .batchTypeKey('e')\n        .batchTypeKeys(['N', 'o', 'd', 'e'])\n        .batchTypeText('Node')\n        .batchTypeKey('N', 1000)\n        .batchTypeKey('o', 1000)\n        .batchTypeKey('d', 1000)\n        .batchTypeKey('e', 1000)\n        .sendBatch();\n\nSetting global press delay (in milliseconds):\n\n    ks.setOption('globalDelayPressMillisec', 1000);\n    \nSetting global delay between keys (in milliseconds):\n\n    ks.setOption('globalDelayBetweenMillisec', 1000);\n    \nSetting start delay (in milliseconds):\n\n    ks.setOption('startDelayMillisec', 1000);\n    \nTurning off case correction:\n\n    ks.setOption('caseCorrection', false);\n    \n# List of methods\n\n## Economic methods\n\nUse this methods if you want to send just a small amount of keys. Note that the jar file is called each time one of these methods are called:  \n\n**sendKey(keyCode: string): Promise**\n\nSends one key code.\n\n**sendKeys(arrKeyCodes: array): Promise**\n\nSends multiple key codes.\n\n**sendLetter(letter: char): Promise**\n\nSends a letter. A letter will be automatically converted to key code according to the keyboard layout configuration. You may set this configuration with `cleanKeyboardLayout`, `setKeyboardLayout` or `aggregateKeyboardLayout`.\n\n**sendText(text: string): Promise**\n\nSends a text. A text will have its letters automatically converted to key codes according to the keyboard layout configuration. You may set this configuration with `cleanKeyboardLayout`, `setKeyboardLayout` or `aggregateKeyboardLayout`.\n\n**sendCombination(arrKeyCodes: array): Promise**\n\nSends multiple key codes pressed together.\n\n## Batch methods\n\nUse this methods to send a large amount of keys. The jar file is executed each time you call `sendBatch`. You should start with `startBatch` and end with `sendBatch`:\n \n**startBatch()**\n \nStarts a batch.\n\n**sendBatch(): Promise**\n\nSends the batch.\n\n**batchTypeKey(keyCode: string, waitMillisec: int, batchEvent: int)**\n\nSends a key code. You may pass a delay it will wait until it presses the next key and also the type of event. Type of event is `ks.BATCH_EVENT_KEY_PRESS`, `ks.BATCH_EVENT_KEY_UP` and `ks.BATCH_EVENT_KEY_DOWN`.\n\n**batchTypeKeys(arrKeyCodes: array)**\n\nSends a list of key codes, pressed one after the other.\n\n**batchTypeCombination(arrKeys: array, waitMillisec: int, batchEvent: int)**\n\nSends a combination - list of key codes that will be pressed together. You may pass a delay it will wait until it presses the next key and also the type of event. Type of event is `ks.BATCH_EVENT_KEY_PRESS`, `ks.BATCH_EVENT_KEY_UP` and `ks.BATCH_EVENT_KEY_DOWN`.\n\n**batchTypeText(text: string)**\n\nSends a text. A text will have its letters automatically converted to key codes according to the keyboard layout configuration. You may set this configuration with `cleanKeyboardLayout`, `setKeyboardLayout` or `aggregateKeyboardLayout`.\n\n\n## Keyboard layout methods\n\nKeyboard layout methods affects translation of letter to key code. They affect `sendLetter`, `sendText`, `batchTypeText` and `getKeyCode` methods. \n\n**cleanKeyboardLayout(): void**\n\nResets the keyboard layout configuration.\n\n**setKeyboardLayout(newKeyMap: object): void**\n\nSets a new keyboard layout. For example:\n\n    var keyboardLayout = {\n        'ç': '@192 c',\n        'Ç': '@192 C'\n    };\n        \n    var ks = require('node-key-sender');\n    ks.aggregateKeyboardLayout(keyboardLayout);\n    ks.sendText(\"Ç\");\n\nThis keyboard layout converts letter 'Ç' to key codes '@192' and 'C'.\n \n**aggregateKeyboardLayout(objKeyMap: object): void**\n\nAppends the new mapping to the current mapping.\n\n**getKeyboardLayout(): object**\n\nReturns the current keyboard layout.\n\n\n## Other methods\n\n**getKeyCode(letter: string)**\n\nGets the key code of a letter. A letter will be automatically converted to key code according to the keyboard layout configuration. You may set this configuration with `cleanKeyboardLayout`, `setKeyboardLayout` or `aggregateKeyboardLayout`.\n\n**setOption(optionName: string, optionValue: string)**\n\nOptions that are passed as arguments to the jar. This is the list of valid options names:\n\n- startDelayMillisec (int): Delay in milliseconds it will wait to press the first key.\n- globalDelayPressMillisec (int): Global delay in milliseconds it will keep the key pressed.\n- globalDelayBetweenMillisec (int): Global delay in milliseconds it will wait until it presses the next key.\n- caseCorrection (boolean): When it is on, if you send key 'A' (in upper case), the jar will automatically hold Shift, so resulting key is 'A'.\n- extra (string): Use may use it to send raw arguments to the jar file. Example: ' -c 1 -d 1000'.\n\n**execute(arrParams: array): Promise**\n\nUse this method if you want to directly call the jar file.\n\n## Promises\n\nSome methods of this lib returns a promise:\n\n    ks.sendKey('a').then(\n        function(stdout, stderr) {\n            // For success\n        },        \n        function(error, stdout, stderr) {\n            // For error\n        }\n    );\n\nThe promise is resolved or rejected right after the jar finishes its execution.  \n\nList of methods that returns this promise: `sendCombination`, `sendKey`, `sendKeys`, `sendLetter`, `sendText`, `execute`, `sendBatch`.\n\n\n# List of key codes\n\nWe recommend you search for key codes in the Java [java.awt.event.KeyEvent](https://docs.oracle.com/javase/7/docs/api/java/awt/event/KeyEvent.html) class doc. The key codes are the constants starting with \"VK_\". To use it with this lib, just take out these three letters and you can use the rest of the constant name. For example, VK_SHIFT constant you use \"shift\". VK_A constant you use 'a'. The constant numerical value can also be used with an \"@\" in the beginning. So \"@16\" for VK_SHIFT and \"@65\" for VK_A.\n\nUse this website to get an idea of what key code is bound to each key of your current keyboard: https://www.w3.org/2002/09/tests/keys.html.\n\nBelow, the list of key codes:\n\n| Keyboard key | Label key code | Numerical key code |\n|---|---|---|\n| Enter | \"enter\" | \"@10\" |\n| Backspace | \"back_space\" | \"@8\" |\n| Tab | \"tab\" | \"@9\" |\n| Shift | \"shift\" | \"@16\" |\n| Control | \"control\" | \"@17\" |\n| Alt | \"alt\" | \"@18\" |\n| Pause | \"pause\" | \"@19\" |\n| Caps Lock | \"caps_lock\" | \"@20\" |\n| Esc | \"escape\" | \"@27\" |\n| Space | \"space\" | \"@32\" |\n| Page Up | \"page_up\" | \"@33\" |\n| Page Down | \"page_down\" | \"@34\" |\n| End | \"end\" | \"@35\" |\n| Home | \"home\" | \"@36\" |\n| Left | \"left\" | \"@37\" |\n| Up | \"up\" | \"@38\" |\n| Right | \"right\" | \"@39\" |\n| Down | \"down\" | \"@40\" |\n| Comma | \"comma\" | \"@44\" |\n| Minus | \"minus\" | \"@45\" |\n| Period | \"period\" | \"@46\" |\n| Slash | \"slash\" | \"@47\" |\n| 0 | \"0\" | \"@48\" |\n| 1 | \"1\" | \"@49\" |\n| 2 | \"2\" | \"@50\" |\n| 3 | \"3\" | \"@51\" |\n| 4 | \"4\" | \"@52\" |\n| 5 | \"5\" | \"@53\" |\n| 6 | \"6\" | \"@54\" |\n| 7 | \"7\" | \"@55\" |\n| 8 | \"8\" | \"@56\" |\n| 9 | \"9\" | \"@57\" |\n| Semicolon | \"semicolon\" | \"@59\" |\n| Equals | \"equals\" | \"@61\" |\n| A | \"a\" | \"@65\" |\n| B | \"b\" | \"@66\" |\n| C | \"c\" | \"@67\" |\n| D | \"d\" | \"@68\" |\n| E | \"e\" | \"@69\" |\n| F | \"f\" | \"@70\" |\n| G | \"g\" | \"@71\" |\n| H | \"h\" | \"@72\" |\n| I | \"i\" | \"@73\" |\n| J | \"j\" | \"@74\" |\n| K | \"k\" | \"@75\" |\n| L | \"l\" | \"@76\" |\n| M | \"m\" | \"@77\" |\n| N | \"n\" | \"@78\" |\n| O | \"o\" | \"@79\" |\n| P | \"p\" | \"@80\" |\n| Q | \"q\" | \"@81\" |\n| R | \"r\" | \"@82\" |\n| S | \"s\" | \"@83\" |\n| T | \"t\" | \"@84\" |\n| U | \"u\" | \"@85\" |\n| V | \"v\" | \"@86\" |\n| W | \"w\" | \"@87\" |\n| X | \"x\" | \"@88\" |\n| Y | \"y\" | \"@89\" |\n| Z | \"z\" | \"@90\" |\n| Open bracket | \"open_bracket\" | \"@91\" |\n| Numpad 0 | \"numpad0\" | \"@96\" |\n| Numpad 1 | \"numpad1\" | \"@97\" |\n| Numpad 2 | \"numpad2\" | \"@98\" |\n| Numpad 3 | \"numpad3\" | \"@99\" |\n| Numpad 4 | \"numpad4\" | \"@100\" |\n| Numpad 5 | \"numpad5\" | \"@101\" |\n| Numpad 6 | \"numpad6\" | \"@102\" |\n| Numpad 7 | \"numpad7\" | \"@103\" |\n| Numpad 8 | \"numpad8\" | \"@104\" |\n| Numpad 9 | \"numpad9\" | \"@105\" |\n| Multiply | \"multiply\" | \"@106\" |\n| Add | \"add\" | \"@107\" |\n| Subtract | \"subtract\" | \"@109\" |\n| Decimal | \"decimal\" | \"@110\" |\n| Divide | \"divide\" | \"@111\" |\n| Delete | \"delete\" | \"@127\" |\n| Num Lock | \"num_lock\" | \"@144\" |\n| Scroll Lock | \"scroll_lock\" | \"@145\" |\n| F1 | \"f1\" | \"@112\" |\n| F2 | \"f2\" | \"@113\" |\n| F3 | \"f3\" | \"@114\" |\n| F4 | \"f4\" | \"@115\" |\n| F5 | \"f5\" | \"@116\" |\n| F6 | \"f6\" | \"@117\" |\n| F7 | \"f7\" | \"@118\" |\n| F8 | \"f8\" | \"@119\" |\n| F9 | \"f9\" | \"@120\" |\n| F10 | \"f10\" | \"@121\" |\n| F11 | \"f11\" | \"@122\" |\n| F12 | \"f12\" | \"@123\" |\n| F13 | \"f13\" | \"@61440\" |\n| F14 | \"f14\" | \"@61441\" |\n| F15 | \"f15\" | \"@61442\" |\n| F16 | \"f16\" | \"@61443\" |\n| F17 | \"f17\" | \"@61444\" |\n| F18 | \"f18\" | \"@61445\" |\n| F19 | \"f19\" | \"@61446\" |\n| F20 | \"f20\" | \"@61447\" |\n| F21 | \"f21\" | \"@61448\" |\n| F22 | \"f22\" | \"@61449\" |\n| F23 | \"f23\" | \"@61450\" |\n| F24 | \"f24\" | \"@61451\" |\n| Print Screen | \"print_screen\" | \"@154\" |\n| Insert | \"insert\" | \"@155\" |\n| Help | \"help\" | \"@156\" |\n| Meta | \"meta\" | \"@157\" |\n| Block Quote | \"block_quote\" | \"@192\" |\n| Quote | \"quote\" | \"@222\" |\n| Numeric Key Pad Up | \"kp_up\" | \"@224\" |\n| Numeric Key Pad Down | \"kp_down\" | \"@225\" |\n| Numeric Key Pad Left | \"kp_left\" | \"@226\" |\n| Numeric Key Pad Right | \"kp_right\" | \"@227\" |\n| Grave accent | \"dead_grave\" | \"@128\" |\n| Acute accent | \"dead_acute\" | \"@129\" |\n| Circumflex accent | \"dead_circumflex\" | \"@130\" |\n| Tilde accent | \"dead_tilde\" | \"@131\" |\n| Macron accent | \"dead_macron\" | \"@132\" |\n| Breve accent | \"dead_breve\" | \"@133\" |\n| Above dot accent | \"dead_abovedot\" | \"@134\" |\n| Diaeresis accent | \"dead_diaeresis\" | \"@135\" |\n| Abovering accent | \"dead_abovering\" | \"@136\" |\n| Double acute accent | \"dead_doubleacute\" | \"@137\" |\n| Caron accent | \"dead_caron\" | \"@138\" |\n| Cedilla accent | \"dead_cedilla\" | \"@139\" |\n| Ogonek accent | \"dead_ogonek\" | \"@140\" |\n| Iota accent | \"dead_iota\" | \"@141\" |\n| Voiced sound accent | \"dead_voiced_sound\" | \"@142\" |\n| Semi voiced sound accent | \"dead_semivoiced_sound\" | \"@143\" |\n| Ampersand | \"ampersand\" | \"@150\" |\n| Asterisk | \"asterisk\" | \"@151\" |\n| Double quote | \"quotedbl\" | \"@152\" |\n| Less | \"less\" | \"@153\" |\n| Greater | \"greater\" | \"@160\" |\n| Brace left | \"braceleft\" | \"@161\" |\n| Brace right | \"braceright\" | \"@162\" |\n| At | \"at\" | \"@512\" |\n| Colon | \"colon\" | \"@513\" |\n| Circumflex | \"circumflex\" | \"@514\" |\n| Dollar | \"dollar\" | \"@515\" |\n| Euro Sign | \"euro_sign\" | \"@516\" |\n| Exclamation Mark | \"exclamation_mark\" | \"@517\" |\n| Inverted exclamation mark | \"inverted_exclamation_mark\" | \"@518\" |\n| Left parenthesis | \"left_parenthesis\" | \"@519\" |\n| Right parenthesis | \"right_parenthesis\" | \"@522\" |\n| Number sign | \"number_sign\" | \"@520\" |\n| Plus | \"plus\" | \"@521\" |\n| Underscore | \"underscore\" | \"@523\" |\n| Windows | \"windows\" | \"@524\" |\n| Context menu | \"context_menu\" | \"@525\" |\n| Japanese PC 106 henkan | \"convert\" | \"@28\" |\n| Japanese PC 106 muhenkan | \"nonconvert\" | \"@29\" |\n| Japanese PC 106 eisu | \"alphanumeric\" | \"@240\" |\n| Japanese PC 106 katakana | \"katakana\" | \"@241\" |\n| Japanese PC 106 hiragana | \"hiragana\" | \"@242\" |\n| Japanese PC 106 zenkaku | \"full_width\" | \"@243\" |\n| Japanese PC 106 hankaku | \"half_width\" | \"@244\" |\n| Japanese PC 106 rouman-ji | \"roman_characters\" | \"@245\" |\n| Japanese PC 106 zenkouho | \"all_candidates\" | \"@256\" |\n| Japanese PC 106 maekouho | \"previous_candidate\" | \"@257\" |\n| Japanese PC 106 kanji bangou | \"code_input\" | \"@258\" |\n| Japanese PC 106 kana lock | \"kana_lock\" | \"@262\" |\n| Japanese PC 106 nihongo | \"input_method_on_off\" | \"@263\" |\n| Japanese Solaris kakutei | \"accept\" | \"@30\" |\n| Japanese Solaris kana lock | \"kana\" | \"@21\" |\n| Japanese kanji  | \"kanji\" | \"@25\" |\n| Japanese Macintosh katakana | \"japanese_katakana\" | \"@259\" |\n| Japanese Macintosh hiragana | \"japanese_hiragana\" | \"@260\" |\n| Japanese Macintosh rouman-ji | \"japanese_roman\" | \"@261\" |\n| Sun cut | \"cut\" | \"@65489\" |\n| Sun copy | \"copy\" | \"@65485\" |\n| Sun paste | \"paste\" | \"@65487\" |\n| Sun undo | \"undo\" | \"@65483\" |\n| Sun again | \"again\" | \"@65481\" |\n| Sun find | \"find\" | \"@65488\" |\n| Sun props | \"props\" | \"@65482\" |\n| Sun stop | \"stop\" | \"@65480\" |\n| Compose | \"compose\" | \"@65312\" |\n| Alt GR | \"alt_graph\" | \"@65406\" |\n\nNote that this is an incomplete list and that the key code may vary according to your physical keyboard, keyboard driver and operational system. \n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/garimpeiro-it/node-key-sender.git"
  },
  "scripts": {
    "setup": "npm install"
  },
  "version": "1.0.9"
}
